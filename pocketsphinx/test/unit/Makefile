# Makefile.in generated by automake 1.11.6 from Makefile.am.
# test/unit/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__make_dryrun = \
  { \
    am__dry=no; \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
      *) \
        for am__flg in $$MAKEFLAGS; do \
          case $$am__flg in \
            *=*|--*) ;; \
            *n*) am__dry=yes; break;; \
          esac; \
        done;; \
    esac; \
    test $$am__dry = yes; \
  }
pkgdatadir = $(datadir)/pocketsphinx
pkgincludedir = $(includedir)/pocketsphinx
pkglibdir = $(libdir)/pocketsphinx
pkglibexecdir = $(libexecdir)/pocketsphinx
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
check_PROGRAMS = test_ps_init$(EXEEXT) test_ps_reinit$(EXEEXT) \
	test_ps_fwdtree$(EXEEXT) test_ps_fwdtree_fwdflat$(EXEEXT) \
	test_ps_fwdflat$(EXEEXT) test_ps_fwdflat_bestpath$(EXEEXT) \
	test_ps_fwdtree_bestpath$(EXEEXT) test_ps_simple$(EXEEXT) \
	test_ps_nbest$(EXEEXT) test_ps_lattice$(EXEEXT) \
	test_ps_set_search$(EXEEXT) test_acmod$(EXEEXT) \
	test_acmod_grow$(EXEEXT) test_fwdtree$(EXEEXT) \
	test_fwdflat$(EXEEXT) test_fwdtree_fwdflat$(EXEEXT) \
	test_fwdtree_bestpath$(EXEEXT) test_fwdtree_nbest$(EXEEXT) \
	test_pl_fwdtree$(EXEEXT) test_posterior$(EXEEXT) \
	test_fsg$(EXEEXT) test_fsg2$(EXEEXT) test_fsg3$(EXEEXT) \
	test_jsgf$(EXEEXT) test_lm_read$(EXEEXT) test_dict$(EXEEXT) \
	test_dict2pid$(EXEEXT) test_senfh$(EXEEXT) \
	test_alignment$(EXEEXT) test_state_align$(EXEEXT) \
	test_mllr$(EXEEXT)
subdir = test/unit
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_pkg_swig.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/pkg.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
test_acmod_SOURCES = test_acmod.c
test_acmod_OBJECTS = test_acmod.$(OBJEXT)
test_acmod_LDADD = $(LDADD)
test_acmod_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_acmod_grow_SOURCES = test_acmod_grow.c
test_acmod_grow_OBJECTS = test_acmod_grow.$(OBJEXT)
test_acmod_grow_LDADD = $(LDADD)
test_acmod_grow_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_alignment_SOURCES = test_alignment.c
test_alignment_OBJECTS = test_alignment.$(OBJEXT)
test_alignment_LDADD = $(LDADD)
test_alignment_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_dict_SOURCES = test_dict.c
test_dict_OBJECTS = test_dict.$(OBJEXT)
test_dict_LDADD = $(LDADD)
test_dict_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_dict2pid_SOURCES = test_dict2pid.c
test_dict2pid_OBJECTS = test_dict2pid.$(OBJEXT)
test_dict2pid_LDADD = $(LDADD)
test_dict2pid_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fsg_SOURCES = test_fsg.c
test_fsg_OBJECTS = test_fsg.$(OBJEXT)
test_fsg_LDADD = $(LDADD)
test_fsg_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fsg2_SOURCES = test_fsg2.c
test_fsg2_OBJECTS = test_fsg2.$(OBJEXT)
test_fsg2_LDADD = $(LDADD)
test_fsg2_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fsg3_SOURCES = test_fsg3.c
test_fsg3_OBJECTS = test_fsg3.$(OBJEXT)
test_fsg3_LDADD = $(LDADD)
test_fsg3_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fwdflat_SOURCES = test_fwdflat.c
test_fwdflat_OBJECTS = test_fwdflat.$(OBJEXT)
test_fwdflat_LDADD = $(LDADD)
test_fwdflat_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fwdtree_SOURCES = test_fwdtree.c
test_fwdtree_OBJECTS = test_fwdtree.$(OBJEXT)
test_fwdtree_LDADD = $(LDADD)
test_fwdtree_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fwdtree_bestpath_SOURCES = test_fwdtree_bestpath.c
test_fwdtree_bestpath_OBJECTS = test_fwdtree_bestpath.$(OBJEXT)
test_fwdtree_bestpath_LDADD = $(LDADD)
test_fwdtree_bestpath_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fwdtree_fwdflat_SOURCES = test_fwdtree_fwdflat.c
test_fwdtree_fwdflat_OBJECTS = test_fwdtree_fwdflat.$(OBJEXT)
test_fwdtree_fwdflat_LDADD = $(LDADD)
test_fwdtree_fwdflat_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_fwdtree_nbest_SOURCES = test_fwdtree_nbest.c
test_fwdtree_nbest_OBJECTS = test_fwdtree_nbest.$(OBJEXT)
test_fwdtree_nbest_LDADD = $(LDADD)
test_fwdtree_nbest_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_jsgf_SOURCES = test_jsgf.c
test_jsgf_OBJECTS = test_jsgf.$(OBJEXT)
test_jsgf_LDADD = $(LDADD)
test_jsgf_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_lm_read_SOURCES = test_lm_read.c
test_lm_read_OBJECTS = test_lm_read.$(OBJEXT)
test_lm_read_LDADD = $(LDADD)
test_lm_read_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_mllr_SOURCES = test_mllr.c
test_mllr_OBJECTS = test_mllr.$(OBJEXT)
test_mllr_LDADD = $(LDADD)
test_mllr_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_pl_fwdtree_SOURCES = test_pl_fwdtree.c
test_pl_fwdtree_OBJECTS = test_pl_fwdtree.$(OBJEXT)
test_pl_fwdtree_LDADD = $(LDADD)
test_pl_fwdtree_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_posterior_SOURCES = test_posterior.c
test_posterior_OBJECTS = test_posterior.$(OBJEXT)
test_posterior_LDADD = $(LDADD)
test_posterior_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_fwdflat_SOURCES = test_ps_fwdflat.c
test_ps_fwdflat_OBJECTS = test_ps_fwdflat.$(OBJEXT)
test_ps_fwdflat_LDADD = $(LDADD)
test_ps_fwdflat_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_fwdflat_bestpath_SOURCES = test_ps_fwdflat_bestpath.c
test_ps_fwdflat_bestpath_OBJECTS = test_ps_fwdflat_bestpath.$(OBJEXT)
test_ps_fwdflat_bestpath_LDADD = $(LDADD)
test_ps_fwdflat_bestpath_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_fwdtree_SOURCES = test_ps_fwdtree.c
test_ps_fwdtree_OBJECTS = test_ps_fwdtree.$(OBJEXT)
test_ps_fwdtree_LDADD = $(LDADD)
test_ps_fwdtree_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_fwdtree_bestpath_SOURCES = test_ps_fwdtree_bestpath.c
test_ps_fwdtree_bestpath_OBJECTS = test_ps_fwdtree_bestpath.$(OBJEXT)
test_ps_fwdtree_bestpath_LDADD = $(LDADD)
test_ps_fwdtree_bestpath_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_fwdtree_fwdflat_SOURCES = test_ps_fwdtree_fwdflat.c
test_ps_fwdtree_fwdflat_OBJECTS = test_ps_fwdtree_fwdflat.$(OBJEXT)
test_ps_fwdtree_fwdflat_LDADD = $(LDADD)
test_ps_fwdtree_fwdflat_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_init_SOURCES = test_ps_init.c
test_ps_init_OBJECTS = test_ps_init.$(OBJEXT)
test_ps_init_LDADD = $(LDADD)
test_ps_init_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_lattice_SOURCES = test_ps_lattice.c
test_ps_lattice_OBJECTS = test_ps_lattice.$(OBJEXT)
test_ps_lattice_LDADD = $(LDADD)
test_ps_lattice_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_nbest_SOURCES = test_ps_nbest.c
test_ps_nbest_OBJECTS = test_ps_nbest.$(OBJEXT)
test_ps_nbest_LDADD = $(LDADD)
test_ps_nbest_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_reinit_SOURCES = test_ps_reinit.c
test_ps_reinit_OBJECTS = test_ps_reinit.$(OBJEXT)
test_ps_reinit_LDADD = $(LDADD)
test_ps_reinit_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_set_search_SOURCES = test_ps_set_search.c
test_ps_set_search_OBJECTS = test_ps_set_search.$(OBJEXT)
test_ps_set_search_LDADD = $(LDADD)
test_ps_set_search_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_ps_simple_SOURCES = test_ps_simple.c
test_ps_simple_OBJECTS = test_ps_simple.$(OBJEXT)
test_ps_simple_LDADD = $(LDADD)
test_ps_simple_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_senfh_SOURCES = test_senfh.c
test_senfh_OBJECTS = test_senfh.$(OBJEXT)
test_senfh_LDADD = $(LDADD)
test_senfh_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
test_state_align_SOURCES = test_state_align.c
test_state_align_OBJECTS = test_state_align.$(OBJEXT)
test_state_align_LDADD = $(LDADD)
test_state_align_DEPENDENCIES =  \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = test_acmod.c test_acmod_grow.c test_alignment.c test_dict.c \
	test_dict2pid.c test_fsg.c test_fsg2.c test_fsg3.c \
	test_fwdflat.c test_fwdtree.c test_fwdtree_bestpath.c \
	test_fwdtree_fwdflat.c test_fwdtree_nbest.c test_jsgf.c \
	test_lm_read.c test_mllr.c test_pl_fwdtree.c test_posterior.c \
	test_ps_fwdflat.c test_ps_fwdflat_bestpath.c test_ps_fwdtree.c \
	test_ps_fwdtree_bestpath.c test_ps_fwdtree_fwdflat.c \
	test_ps_init.c test_ps_lattice.c test_ps_nbest.c \
	test_ps_reinit.c test_ps_set_search.c test_ps_simple.c \
	test_senfh.c test_state_align.c
DIST_SOURCES = test_acmod.c test_acmod_grow.c test_alignment.c \
	test_dict.c test_dict2pid.c test_fsg.c test_fsg2.c test_fsg3.c \
	test_fwdflat.c test_fwdtree.c test_fwdtree_bestpath.c \
	test_fwdtree_fwdflat.c test_fwdtree_nbest.c test_jsgf.c \
	test_lm_read.c test_mllr.c test_pl_fwdtree.c test_posterior.c \
	test_ps_fwdflat.c test_ps_fwdflat_bestpath.c test_ps_fwdtree.c \
	test_ps_fwdtree_bestpath.c test_ps_fwdtree_fwdflat.c \
	test_ps_init.c test_ps_lattice.c test_ps_nbest.c \
	test_ps_reinit.c test_ps_set_search.c test_ps_simple.c \
	test_senfh.c test_state_align.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/missing --run aclocal-1.11
AMTAR = $${TAR-tar}
AR = ar
AUTOCONF = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/missing --run autoconf
AUTOHEADER = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/missing --run autoheader
AUTOMAKE = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall
CPP = gcc -E
CPPFLAGS =  -I/usr/local/src/pocketsphinx_github/pocketsphinx/../sphinxbase/include
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"pocketsphinx\" -DPACKAGE_TARNAME=\"pocketsphinx\" -DPACKAGE_VERSION=\"5prealpha\" -DPACKAGE_STRING=\"pocketsphinx\ 5prealpha\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DHAVE_LONG_LONG=1 -DSIZEOF_LONG_LONG=8 -DHAVE_DUP2=1
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
GST_CFLAGS = -pthread -I/usr/include/gstreamer-0.10 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/libxml2   
GST_LIBS = -pthread -lgstbase-0.10 -lgstreamer-0.10 -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lxml2 -lglib-2.0  
GST_MAJORMINOR = 0.10
GST_PLUGIN_LDFLAGS = -module -avoid-version -export-symbols-regex _*\(gst_\|Gst\|GST_\).*
GStreamer_CFLAGS = -pthread -I/usr/include/gstreamer-0.10 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/libxml2  
GStreamer_LIBS = -pthread -lgstbase-0.10 -lgstreamer-0.10 -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lxml2 -lglib-2.0  
HAVE_DOXYGEN = no
HAVE_PKGCONFIG = yes
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS =  -L/usr/local/src/pocketsphinx_github/pocketsphinx/../sphinxbase/src/libsphinxad 		     -L/usr/local/src/pocketsphinx_github/pocketsphinx/../sphinxbase/src/libsphinxbase
LIBOBJS = 
LIBS =  -lsphinxbase
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = pocketsphinx
PACKAGE_BUGREPORT = 
PACKAGE_NAME = pocketsphinx
PACKAGE_STRING = pocketsphinx 5prealpha
PACKAGE_TARNAME = pocketsphinx
PACKAGE_URL = 
PACKAGE_VERSION = 5prealpha
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PYTHON = /usr/bin/python
PYTHON_CPPFLAGS = -I/usr/include/python2.7
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.7
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SPHINXBASE_CFLAGS = 
SPHINXBASE_LIBS = 
SPHINXBASE_SWIG = /usr/local/src/pocketsphinx_github/pocketsphinx/../sphinxbase/swig
STRIP = strip
SWIG = /usr/bin/swig
SWIG_LIB = /usr/share/swig2.0
VERSION = 5prealpha
abs_builddir = /usr/local/src/pocketsphinx_github/pocketsphinx/test/unit
abs_srcdir = /usr/local/src/pocketsphinx_github/pocketsphinx/test/unit
abs_top_builddir = /usr/local/src/pocketsphinx_github/pocketsphinx
abs_top_srcdir = /usr/local/src/pocketsphinx_github/pocketsphinx
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /usr/local/src/pocketsphinx_github/pocketsphinx/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/pocketsphinx
pkgpythondir = ${pythondir}/pocketsphinx
plugindir = $(libdir)/gstreamer-0.10
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python2.7/dist-packages
pythondir = ${prefix}/lib/python2.7/dist-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
TESTS = $(check_PROGRAMS)
EXTRA_DIST = ps_test.c
noinst_HEADERS = test_macros.h
INCLUDES = -I$(top_srcdir)/include \
	-I$(top_srcdir)/src/libpocketsphinx \
	-I$(top_builddir)/include \
	-I$(srcdir) \
	-DMODELDIR=\"${top_srcdir}/model\" \
	-DDATADIR=\"${top_srcdir}/test/data\"

LDADD = \
	$(top_builddir)/src/libpocketsphinx/libpocketsphinx.la \
	-lsphinxbase

CLEANFILES = *.log *.out *.lat *.mfc *.raw *.dic *.sen
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign test/unit/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign test/unit/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
test_acmod$(EXEEXT): $(test_acmod_OBJECTS) $(test_acmod_DEPENDENCIES) $(EXTRA_test_acmod_DEPENDENCIES) 
	@rm -f test_acmod$(EXEEXT)
	$(LINK) $(test_acmod_OBJECTS) $(test_acmod_LDADD) $(LIBS)
test_acmod_grow$(EXEEXT): $(test_acmod_grow_OBJECTS) $(test_acmod_grow_DEPENDENCIES) $(EXTRA_test_acmod_grow_DEPENDENCIES) 
	@rm -f test_acmod_grow$(EXEEXT)
	$(LINK) $(test_acmod_grow_OBJECTS) $(test_acmod_grow_LDADD) $(LIBS)
test_alignment$(EXEEXT): $(test_alignment_OBJECTS) $(test_alignment_DEPENDENCIES) $(EXTRA_test_alignment_DEPENDENCIES) 
	@rm -f test_alignment$(EXEEXT)
	$(LINK) $(test_alignment_OBJECTS) $(test_alignment_LDADD) $(LIBS)
test_dict$(EXEEXT): $(test_dict_OBJECTS) $(test_dict_DEPENDENCIES) $(EXTRA_test_dict_DEPENDENCIES) 
	@rm -f test_dict$(EXEEXT)
	$(LINK) $(test_dict_OBJECTS) $(test_dict_LDADD) $(LIBS)
test_dict2pid$(EXEEXT): $(test_dict2pid_OBJECTS) $(test_dict2pid_DEPENDENCIES) $(EXTRA_test_dict2pid_DEPENDENCIES) 
	@rm -f test_dict2pid$(EXEEXT)
	$(LINK) $(test_dict2pid_OBJECTS) $(test_dict2pid_LDADD) $(LIBS)
test_fsg$(EXEEXT): $(test_fsg_OBJECTS) $(test_fsg_DEPENDENCIES) $(EXTRA_test_fsg_DEPENDENCIES) 
	@rm -f test_fsg$(EXEEXT)
	$(LINK) $(test_fsg_OBJECTS) $(test_fsg_LDADD) $(LIBS)
test_fsg2$(EXEEXT): $(test_fsg2_OBJECTS) $(test_fsg2_DEPENDENCIES) $(EXTRA_test_fsg2_DEPENDENCIES) 
	@rm -f test_fsg2$(EXEEXT)
	$(LINK) $(test_fsg2_OBJECTS) $(test_fsg2_LDADD) $(LIBS)
test_fsg3$(EXEEXT): $(test_fsg3_OBJECTS) $(test_fsg3_DEPENDENCIES) $(EXTRA_test_fsg3_DEPENDENCIES) 
	@rm -f test_fsg3$(EXEEXT)
	$(LINK) $(test_fsg3_OBJECTS) $(test_fsg3_LDADD) $(LIBS)
test_fwdflat$(EXEEXT): $(test_fwdflat_OBJECTS) $(test_fwdflat_DEPENDENCIES) $(EXTRA_test_fwdflat_DEPENDENCIES) 
	@rm -f test_fwdflat$(EXEEXT)
	$(LINK) $(test_fwdflat_OBJECTS) $(test_fwdflat_LDADD) $(LIBS)
test_fwdtree$(EXEEXT): $(test_fwdtree_OBJECTS) $(test_fwdtree_DEPENDENCIES) $(EXTRA_test_fwdtree_DEPENDENCIES) 
	@rm -f test_fwdtree$(EXEEXT)
	$(LINK) $(test_fwdtree_OBJECTS) $(test_fwdtree_LDADD) $(LIBS)
test_fwdtree_bestpath$(EXEEXT): $(test_fwdtree_bestpath_OBJECTS) $(test_fwdtree_bestpath_DEPENDENCIES) $(EXTRA_test_fwdtree_bestpath_DEPENDENCIES) 
	@rm -f test_fwdtree_bestpath$(EXEEXT)
	$(LINK) $(test_fwdtree_bestpath_OBJECTS) $(test_fwdtree_bestpath_LDADD) $(LIBS)
test_fwdtree_fwdflat$(EXEEXT): $(test_fwdtree_fwdflat_OBJECTS) $(test_fwdtree_fwdflat_DEPENDENCIES) $(EXTRA_test_fwdtree_fwdflat_DEPENDENCIES) 
	@rm -f test_fwdtree_fwdflat$(EXEEXT)
	$(LINK) $(test_fwdtree_fwdflat_OBJECTS) $(test_fwdtree_fwdflat_LDADD) $(LIBS)
test_fwdtree_nbest$(EXEEXT): $(test_fwdtree_nbest_OBJECTS) $(test_fwdtree_nbest_DEPENDENCIES) $(EXTRA_test_fwdtree_nbest_DEPENDENCIES) 
	@rm -f test_fwdtree_nbest$(EXEEXT)
	$(LINK) $(test_fwdtree_nbest_OBJECTS) $(test_fwdtree_nbest_LDADD) $(LIBS)
test_jsgf$(EXEEXT): $(test_jsgf_OBJECTS) $(test_jsgf_DEPENDENCIES) $(EXTRA_test_jsgf_DEPENDENCIES) 
	@rm -f test_jsgf$(EXEEXT)
	$(LINK) $(test_jsgf_OBJECTS) $(test_jsgf_LDADD) $(LIBS)
test_lm_read$(EXEEXT): $(test_lm_read_OBJECTS) $(test_lm_read_DEPENDENCIES) $(EXTRA_test_lm_read_DEPENDENCIES) 
	@rm -f test_lm_read$(EXEEXT)
	$(LINK) $(test_lm_read_OBJECTS) $(test_lm_read_LDADD) $(LIBS)
test_mllr$(EXEEXT): $(test_mllr_OBJECTS) $(test_mllr_DEPENDENCIES) $(EXTRA_test_mllr_DEPENDENCIES) 
	@rm -f test_mllr$(EXEEXT)
	$(LINK) $(test_mllr_OBJECTS) $(test_mllr_LDADD) $(LIBS)
test_pl_fwdtree$(EXEEXT): $(test_pl_fwdtree_OBJECTS) $(test_pl_fwdtree_DEPENDENCIES) $(EXTRA_test_pl_fwdtree_DEPENDENCIES) 
	@rm -f test_pl_fwdtree$(EXEEXT)
	$(LINK) $(test_pl_fwdtree_OBJECTS) $(test_pl_fwdtree_LDADD) $(LIBS)
test_posterior$(EXEEXT): $(test_posterior_OBJECTS) $(test_posterior_DEPENDENCIES) $(EXTRA_test_posterior_DEPENDENCIES) 
	@rm -f test_posterior$(EXEEXT)
	$(LINK) $(test_posterior_OBJECTS) $(test_posterior_LDADD) $(LIBS)
test_ps_fwdflat$(EXEEXT): $(test_ps_fwdflat_OBJECTS) $(test_ps_fwdflat_DEPENDENCIES) $(EXTRA_test_ps_fwdflat_DEPENDENCIES) 
	@rm -f test_ps_fwdflat$(EXEEXT)
	$(LINK) $(test_ps_fwdflat_OBJECTS) $(test_ps_fwdflat_LDADD) $(LIBS)
test_ps_fwdflat_bestpath$(EXEEXT): $(test_ps_fwdflat_bestpath_OBJECTS) $(test_ps_fwdflat_bestpath_DEPENDENCIES) $(EXTRA_test_ps_fwdflat_bestpath_DEPENDENCIES) 
	@rm -f test_ps_fwdflat_bestpath$(EXEEXT)
	$(LINK) $(test_ps_fwdflat_bestpath_OBJECTS) $(test_ps_fwdflat_bestpath_LDADD) $(LIBS)
test_ps_fwdtree$(EXEEXT): $(test_ps_fwdtree_OBJECTS) $(test_ps_fwdtree_DEPENDENCIES) $(EXTRA_test_ps_fwdtree_DEPENDENCIES) 
	@rm -f test_ps_fwdtree$(EXEEXT)
	$(LINK) $(test_ps_fwdtree_OBJECTS) $(test_ps_fwdtree_LDADD) $(LIBS)
test_ps_fwdtree_bestpath$(EXEEXT): $(test_ps_fwdtree_bestpath_OBJECTS) $(test_ps_fwdtree_bestpath_DEPENDENCIES) $(EXTRA_test_ps_fwdtree_bestpath_DEPENDENCIES) 
	@rm -f test_ps_fwdtree_bestpath$(EXEEXT)
	$(LINK) $(test_ps_fwdtree_bestpath_OBJECTS) $(test_ps_fwdtree_bestpath_LDADD) $(LIBS)
test_ps_fwdtree_fwdflat$(EXEEXT): $(test_ps_fwdtree_fwdflat_OBJECTS) $(test_ps_fwdtree_fwdflat_DEPENDENCIES) $(EXTRA_test_ps_fwdtree_fwdflat_DEPENDENCIES) 
	@rm -f test_ps_fwdtree_fwdflat$(EXEEXT)
	$(LINK) $(test_ps_fwdtree_fwdflat_OBJECTS) $(test_ps_fwdtree_fwdflat_LDADD) $(LIBS)
test_ps_init$(EXEEXT): $(test_ps_init_OBJECTS) $(test_ps_init_DEPENDENCIES) $(EXTRA_test_ps_init_DEPENDENCIES) 
	@rm -f test_ps_init$(EXEEXT)
	$(LINK) $(test_ps_init_OBJECTS) $(test_ps_init_LDADD) $(LIBS)
test_ps_lattice$(EXEEXT): $(test_ps_lattice_OBJECTS) $(test_ps_lattice_DEPENDENCIES) $(EXTRA_test_ps_lattice_DEPENDENCIES) 
	@rm -f test_ps_lattice$(EXEEXT)
	$(LINK) $(test_ps_lattice_OBJECTS) $(test_ps_lattice_LDADD) $(LIBS)
test_ps_nbest$(EXEEXT): $(test_ps_nbest_OBJECTS) $(test_ps_nbest_DEPENDENCIES) $(EXTRA_test_ps_nbest_DEPENDENCIES) 
	@rm -f test_ps_nbest$(EXEEXT)
	$(LINK) $(test_ps_nbest_OBJECTS) $(test_ps_nbest_LDADD) $(LIBS)
test_ps_reinit$(EXEEXT): $(test_ps_reinit_OBJECTS) $(test_ps_reinit_DEPENDENCIES) $(EXTRA_test_ps_reinit_DEPENDENCIES) 
	@rm -f test_ps_reinit$(EXEEXT)
	$(LINK) $(test_ps_reinit_OBJECTS) $(test_ps_reinit_LDADD) $(LIBS)
test_ps_set_search$(EXEEXT): $(test_ps_set_search_OBJECTS) $(test_ps_set_search_DEPENDENCIES) $(EXTRA_test_ps_set_search_DEPENDENCIES) 
	@rm -f test_ps_set_search$(EXEEXT)
	$(LINK) $(test_ps_set_search_OBJECTS) $(test_ps_set_search_LDADD) $(LIBS)
test_ps_simple$(EXEEXT): $(test_ps_simple_OBJECTS) $(test_ps_simple_DEPENDENCIES) $(EXTRA_test_ps_simple_DEPENDENCIES) 
	@rm -f test_ps_simple$(EXEEXT)
	$(LINK) $(test_ps_simple_OBJECTS) $(test_ps_simple_LDADD) $(LIBS)
test_senfh$(EXEEXT): $(test_senfh_OBJECTS) $(test_senfh_DEPENDENCIES) $(EXTRA_test_senfh_DEPENDENCIES) 
	@rm -f test_senfh$(EXEEXT)
	$(LINK) $(test_senfh_OBJECTS) $(test_senfh_LDADD) $(LIBS)
test_state_align$(EXEEXT): $(test_state_align_OBJECTS) $(test_state_align_DEPENDENCIES) $(EXTRA_test_state_align_DEPENDENCIES) 
	@rm -f test_state_align$(EXEEXT)
	$(LINK) $(test_state_align_OBJECTS) $(test_state_align_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/test_acmod.Po
include ./$(DEPDIR)/test_acmod_grow.Po
include ./$(DEPDIR)/test_alignment.Po
include ./$(DEPDIR)/test_dict.Po
include ./$(DEPDIR)/test_dict2pid.Po
include ./$(DEPDIR)/test_fsg.Po
include ./$(DEPDIR)/test_fsg2.Po
include ./$(DEPDIR)/test_fsg3.Po
include ./$(DEPDIR)/test_fwdflat.Po
include ./$(DEPDIR)/test_fwdtree.Po
include ./$(DEPDIR)/test_fwdtree_bestpath.Po
include ./$(DEPDIR)/test_fwdtree_fwdflat.Po
include ./$(DEPDIR)/test_fwdtree_nbest.Po
include ./$(DEPDIR)/test_jsgf.Po
include ./$(DEPDIR)/test_lm_read.Po
include ./$(DEPDIR)/test_mllr.Po
include ./$(DEPDIR)/test_pl_fwdtree.Po
include ./$(DEPDIR)/test_posterior.Po
include ./$(DEPDIR)/test_ps_fwdflat.Po
include ./$(DEPDIR)/test_ps_fwdflat_bestpath.Po
include ./$(DEPDIR)/test_ps_fwdtree.Po
include ./$(DEPDIR)/test_ps_fwdtree_bestpath.Po
include ./$(DEPDIR)/test_ps_fwdtree_fwdflat.Po
include ./$(DEPDIR)/test_ps_init.Po
include ./$(DEPDIR)/test_ps_lattice.Po
include ./$(DEPDIR)/test_ps_nbest.Po
include ./$(DEPDIR)/test_ps_reinit.Po
include ./$(DEPDIR)/test_ps_set_search.Po
include ./$(DEPDIR)/test_ps_simple.Po
include ./$(DEPDIR)/test_senfh.Po
include ./$(DEPDIR)/test_state_align.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


valgrind-check:
	for testf in .libs/lt-*; do valgrind --leak-check=full --show-reachable=yes \
	    $$testf; done >& valgrind.log

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
